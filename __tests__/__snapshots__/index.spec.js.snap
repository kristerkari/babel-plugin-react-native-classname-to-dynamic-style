// Jest Snapshot v1, https://goo.gl/fbAQLP

exports[`babel-plugin-react-native-classname-to-dynamic-style Should merge single className and a style with a function call: Should merge single className and a style with a function call 1`] = `
"
const Foo = () => <div className={styles.foo} style={myFn()}>Foo</div>

      ↓ ↓ ↓ ↓ ↓ ↓

\\"use strict\\";

var _reactNativeDynamicStyleProcessor = require(\\"react-native-dynamic-style-processor\\");

var Foo = function Foo() {
  return React.createElement(
    \\"div\\",
    { style: [_reactNativeDynamicStyleProcessor.process(styles).foo, myFn()] },
    \\"Foo\\"
  );
};
"
`;

exports[`babel-plugin-react-native-classname-to-dynamic-style Should not clash with already existing require call with the same name: Should not clash with already existing require call with the same name 1`] = `
"
var reactNativeDynamicStyleProcessor = require('react-native-dynamic-style-processor');
var _reactNativeDynamicStyleProcessor = require('react-native-dynamic-style-processor');
const Foo = () => <div className={styles.foo}>Foo</div>

      ↓ ↓ ↓ ↓ ↓ ↓

'use strict';

var reactNativeDynamicStyleProcessor = require('react-native-dynamic-style-processor');
var _reactNativeDynamicStyleProcessor = require('react-native-dynamic-style-processor');

var _reactNativeDynamicStyleProcessor2 = require('react-native-dynamic-style-processor');

var Foo = function Foo() {
  return React.createElement(
    'div',
    { style: _reactNativeDynamicStyleProcessor2.process(styles).foo },
    'Foo'
  );
};
"
`;

exports[`babel-plugin-react-native-classname-to-dynamic-style Should not touch className string and empty style definition: Should not touch className string and empty style definition 1`] = `
"
const Foo = () => <div className=\\"should-not-change\\" style={{}}>Foo</div>

      ↓ ↓ ↓ ↓ ↓ ↓

\\"use strict\\";

var Foo = function Foo() {
  return React.createElement(
    \\"div\\",
    { className: \\"should-not-change\\", style: {} },
    \\"Foo\\"
  );
};
"
`;

exports[`babel-plugin-react-native-classname-to-dynamic-style Should not touch className template string and empty style definition: Should not touch className template string and empty style definition 1`] = `
"
const Foo = () => <div className={\`should-not-change\`} style={{}}>Foo</div>

      ↓ ↓ ↓ ↓ ↓ ↓

\\"use strict\\";

var Foo = function Foo() {
  return React.createElement(
    \\"div\\",
    { className: \\"should-not-change\\", style: {} },
    \\"Foo\\"
  );
};
"
`;

exports[`babel-plugin-react-native-classname-to-dynamic-style Should not touch className template string: Should not touch className template string 1`] = `
"
const Foo = () => <div className={\`should-not-change\`}>Foo</div>

      ↓ ↓ ↓ ↓ ↓ ↓

\\"use strict\\";

var Foo = function Foo() {
  return React.createElement(
    \\"div\\",
    { className: \\"should-not-change\\" },
    \\"Foo\\"
  );
};
"
`;

exports[`babel-plugin-react-native-classname-to-dynamic-style Should not touch empty style definition: Should not touch empty style definition 1`] = `
"
const Foo = () => <div style={{}}>Foo</div>

      ↓ ↓ ↓ ↓ ↓ ↓

\\"use strict\\";

var Foo = function Foo() {
  return React.createElement(
    \\"div\\",
    { style: {} },
    \\"Foo\\"
  );
};
"
`;

exports[`babel-plugin-react-native-classname-to-dynamic-style Should not touch multiple style objects: Should not touch multiple style objects 1`] = `
"
const Foo = () => <div style={[styles.shouldNotBeTransformed, { color: \\"#f00\\" }]}>Foo</div>

      ↓ ↓ ↓ ↓ ↓ ↓

\\"use strict\\";

var Foo = function Foo() {
  return React.createElement(
    \\"div\\",
    { style: [styles.shouldNotBeTransformed, { color: \\"#f00\\" }] },
    \\"Foo\\"
  );
};
"
`;

exports[`babel-plugin-react-native-classname-to-dynamic-style Should not touch multiple style objects: Should not touch multiple style objects 2`] = `
"
const Foo = () => <div style={[{ backgroundColor: \\"#000\\" }, { color: \\"#f00\\" }]}>Foo</div>

      ↓ ↓ ↓ ↓ ↓ ↓

\\"use strict\\";

var Foo = function Foo() {
  return React.createElement(
    \\"div\\",
    { style: [{ backgroundColor: \\"#000\\" }, { color: \\"#f00\\" }] },
    \\"Foo\\"
  );
};
"
`;

exports[`babel-plugin-react-native-classname-to-dynamic-style Should not touch nested elements with style objects: Should not touch nested elements with style objects 1`] = `
"
const Foo = () => <div style={{ height: \\"100%\\" }}><div style={{ color: \\"#f00\\" }}>Foo</div></div>

      ↓ ↓ ↓ ↓ ↓ ↓

\\"use strict\\";

var Foo = function Foo() {
  return React.createElement(
    \\"div\\",
    { style: { height: \\"100%\\" } },
    React.createElement(
      \\"div\\",
      { style: { color: \\"#f00\\" } },
      \\"Foo\\"
    )
  );
};
"
`;

exports[`babel-plugin-react-native-classname-to-dynamic-style Should not touch style object inside an array: Should not touch style object inside an array 1`] = `
"
const Foo = () => <div style={[{ color: \\"#f00\\" }]}>Foo</div>

      ↓ ↓ ↓ ↓ ↓ ↓

\\"use strict\\";

var Foo = function Foo() {
  return React.createElement(
    \\"div\\",
    { style: [{ color: \\"#f00\\" }] },
    \\"Foo\\"
  );
};
"
`;

exports[`babel-plugin-react-native-classname-to-dynamic-style Should not touch style object: Should not touch style object 1`] = `
"
const Foo = () => <div style={{ color: \\"#f00\\" }}>Foo</div>

      ↓ ↓ ↓ ↓ ↓ ↓

\\"use strict\\";

var Foo = function Foo() {
  return React.createElement(
    \\"div\\",
    { style: { color: \\"#f00\\" } },
    \\"Foo\\"
  );
};
"
`;

exports[`babel-plugin-react-native-classname-to-dynamic-style Should not touch style tag ternaries: Should not touch style tag ternaries 1`] = `
"
const Foo = () => <div style={isTrue ? styles.foo : styles.bar}>Foo</div>

      ↓ ↓ ↓ ↓ ↓ ↓

\\"use strict\\";

var Foo = function Foo() {
  return React.createElement(
    \\"div\\",
    { style: isTrue ? styles.foo : styles.bar },
    \\"Foo\\"
  );
};
"
`;

exports[`babel-plugin-react-native-classname-to-dynamic-style Should not touch style with a function call: Should not touch style with a function call 1`] = `
"
const Foo = () => <div style={myFn()}>Foo</div>

      ↓ ↓ ↓ ↓ ↓ ↓

\\"use strict\\";

var Foo = function Foo() {
  return React.createElement(
    \\"div\\",
    { style: myFn() },
    \\"Foo\\"
  );
};
"
`;

exports[`babel-plugin-react-native-classname-to-dynamic-style Should preserve className string and style object: Should preserve className string and style object 1`] = `
"
const Foo = () => <div className=\\"should-not-change\\" style={{ color: \\"#f00\\" }}>Foo</div>

      ↓ ↓ ↓ ↓ ↓ ↓

\\"use strict\\";

var Foo = function Foo() {
  return React.createElement(
    \\"div\\",
    { className: \\"should-not-change\\", style: { color: \\"#f00\\" } },
    \\"Foo\\"
  );
};
"
`;

exports[`babel-plugin-react-native-classname-to-dynamic-style Should preserve className string: Should preserve className string 1`] = `
"
const Foo = () => <div className=\\"should-not-change\\">Foo</div>

      ↓ ↓ ↓ ↓ ↓ ↓

\\"use strict\\";

var Foo = function Foo() {
  return React.createElement(
    \\"div\\",
    { className: \\"should-not-change\\" },
    \\"Foo\\"
  );
};
"
`;

exports[`babel-plugin-react-native-classname-to-dynamic-style Should preserve import and className that uses bracket syntax: Should preserve import and className that uses bracket syntax 1`] = `
"
import styles from \\"./styles.css\\";
const Foo = (color) => <div className={styles[\\"foo-bar\\"]}>Foo</div>

      ↓ ↓ ↓ ↓ ↓ ↓

\\"use strict\\";

var _styles = require(\\"./styles.css\\");

var _styles2 = _interopRequireDefault(_styles);

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

var _reactNativeDynamicStyleProcessor = require(\\"react-native-dynamic-style-processor\\");

var Foo = function Foo(color) {
  return React.createElement(
    \\"div\\",
    { style: _reactNativeDynamicStyleProcessor.process(_styles2.default)[\\"foo-bar\\"] },
    \\"Foo\\"
  );
};
"
`;

exports[`babel-plugin-react-native-classname-to-dynamic-style Should preserve import and transform classname with ternary: Should preserve import and transform classname with ternary 1`] = `
"
import styles from \\"./styles.css\\";
const Foo = () => <div className={isTrue ? styles.foo : styles.bar}>Foo</div>

      ↓ ↓ ↓ ↓ ↓ ↓

\\"use strict\\";

var _styles = require(\\"./styles.css\\");

var _styles2 = _interopRequireDefault(_styles);

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

var _reactNativeDynamicStyleProcessor = require(\\"react-native-dynamic-style-processor\\");

var Foo = function Foo() {
  return React.createElement(
    \\"div\\",
    { style: isTrue ? _reactNativeDynamicStyleProcessor.process(_styles2.default).foo : _reactNativeDynamicStyleProcessor.process(_styles2.default).bar },
    \\"Foo\\"
  );
};
"
`;

exports[`babel-plugin-react-native-classname-to-dynamic-style Should preserve reference to style import: Should preserve reference to style import 1`] = `
"
import styles from \\"./styles.css\\";
const Foo = () => <div className={styles.foo}>Foo</div>

      ↓ ↓ ↓ ↓ ↓ ↓

\\"use strict\\";

var _styles = require(\\"./styles.css\\");

var _styles2 = _interopRequireDefault(_styles);

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

var _reactNativeDynamicStyleProcessor = require(\\"react-native-dynamic-style-processor\\");

var Foo = function Foo() {
  return React.createElement(
    \\"div\\",
    { style: _reactNativeDynamicStyleProcessor.process(_styles2.default).foo },
    \\"Foo\\"
  );
};
"
`;

exports[`babel-plugin-react-native-classname-to-dynamic-style Should preserve reference to style require: Should preserve reference to style require 1`] = `
"
const styles = require(\\"./styles.css\\");
const Foo = () => <div className={styles.foo}>Foo</div>

      ↓ ↓ ↓ ↓ ↓ ↓

\\"use strict\\";

var styles = require(\\"./styles.css\\");

var _reactNativeDynamicStyleProcessor = require(\\"react-native-dynamic-style-processor\\");

var Foo = function Foo() {
  return React.createElement(
    \\"div\\",
    { style: _reactNativeDynamicStyleProcessor.process(styles).foo },
    \\"Foo\\"
  );
};
"
`;

exports[`babel-plugin-react-native-classname-to-dynamic-style Should preserve require and className that uses bracket syntax: Should preserve require and className that uses bracket syntax 1`] = `
"
const styles = require(\\"./styles.css\\");
const Foo = (color) => <div className={styles[\\"foo-bar\\"]}>Foo</div>

      ↓ ↓ ↓ ↓ ↓ ↓

\\"use strict\\";

var styles = require(\\"./styles.css\\");

var _reactNativeDynamicStyleProcessor = require(\\"react-native-dynamic-style-processor\\");

var Foo = function Foo(color) {
  return React.createElement(
    \\"div\\",
    { style: _reactNativeDynamicStyleProcessor.process(styles)[\\"foo-bar\\"] },
    \\"Foo\\"
  );
};
"
`;

exports[`babel-plugin-react-native-classname-to-dynamic-style Should preserve require and transform classname with ternary: Should preserve require and transform classname with ternary 1`] = `
"
const styles = require(\\"./styles.css\\");
const Foo = () => <div className={isTrue ? styles.foo : styles.bar}>Foo</div>

      ↓ ↓ ↓ ↓ ↓ ↓

\\"use strict\\";

var styles = require(\\"./styles.css\\");

var _reactNativeDynamicStyleProcessor = require(\\"react-native-dynamic-style-processor\\");

var Foo = function Foo() {
  return React.createElement(
    \\"div\\",
    { style: isTrue ? _reactNativeDynamicStyleProcessor.process(styles).foo : _reactNativeDynamicStyleProcessor.process(styles).bar },
    \\"Foo\\"
  );
};
"
`;

exports[`babel-plugin-react-native-classname-to-dynamic-style Should support ignore strings but merge expressions inside template literals: Should support ignore strings but merge expressions inside template literals 1`] = `
"
const Foo = () => <div className={\` ignored \${styles.transformed}\`}>Foo</div>

      ↓ ↓ ↓ ↓ ↓ ↓

\\"use strict\\";

var _reactNativeDynamicStyleProcessor = require(\\"react-native-dynamic-style-processor\\");

var Foo = function Foo() {
  return React.createElement(
    \\"div\\",
    { style: [_reactNativeDynamicStyleProcessor.process(styles).transformed] },
    \\"Foo\\"
  );
};
"
`;

exports[`babel-plugin-react-native-classname-to-dynamic-style Should support merging className with empty style object and keep other props: Should support merging className with empty style object and keep other props 1`] = `
"
const Foo = () => <div className={styles.shouldMergeWithStyles} style={{}} key={1}>Foo</div>

      ↓ ↓ ↓ ↓ ↓ ↓

\\"use strict\\";

var _reactNativeDynamicStyleProcessor = require(\\"react-native-dynamic-style-processor\\");

var Foo = function Foo() {
  return React.createElement(
    \\"div\\",
    { style: [_reactNativeDynamicStyleProcessor.process(styles).shouldMergeWithStyles, {}], key: 1 },
    \\"Foo\\"
  );
};
"
`;

exports[`babel-plugin-react-native-classname-to-dynamic-style Should support merging className with empty style object: Should support merging className with empty style object 1`] = `
"
const Foo = () => <div className={styles.shouldMergeWithStyles} style={{}}>Foo</div>

      ↓ ↓ ↓ ↓ ↓ ↓

\\"use strict\\";

var _reactNativeDynamicStyleProcessor = require(\\"react-native-dynamic-style-processor\\");

var Foo = function Foo() {
  return React.createElement(
    \\"div\\",
    { style: [_reactNativeDynamicStyleProcessor.process(styles).shouldMergeWithStyles, {}] },
    \\"Foo\\"
  );
};
"
`;

exports[`babel-plugin-react-native-classname-to-dynamic-style Should support merging className with style but not touch parent element's style: Should support merging className with style but not touch parent element's style 1`] = `
"
const Foo = () => <div style={{ width: \\"100%\\" }}><div className={styles.shouldMergeWithStyles} style={{ color: \\"#f00\\" }}>Foo</div></div>

      ↓ ↓ ↓ ↓ ↓ ↓

\\"use strict\\";

var _reactNativeDynamicStyleProcessor = require(\\"react-native-dynamic-style-processor\\");

var Foo = function Foo() {
  return React.createElement(
    \\"div\\",
    { style: { width: \\"100%\\" } },
    React.createElement(
      \\"div\\",
      { style: [_reactNativeDynamicStyleProcessor.process(styles).shouldMergeWithStyles, { color: \\"#f00\\" }] },
      \\"Foo\\"
    )
  );
};
"
`;

exports[`babel-plugin-react-native-classname-to-dynamic-style Should support merging className with style with function calls: Should support merging className with style with function calls 1`] = `
"
const Foo = () => <div className={b(styles.shouldMergeWithStyles)} style={f(styles.foo)}>Foo</div>

      ↓ ↓ ↓ ↓ ↓ ↓

\\"use strict\\";

var _reactNativeDynamicStyleProcessor = require(\\"react-native-dynamic-style-processor\\");

var Foo = function Foo() {
  return React.createElement(
    \\"div\\",
    { style: [b(_reactNativeDynamicStyleProcessor.process(styles).shouldMergeWithStyles), f(styles.foo)] },
    \\"Foo\\"
  );
};
"
`;

exports[`babel-plugin-react-native-classname-to-dynamic-style Should support merging className with style with multiple elements: Should support merging className with style with multiple elements 1`] = `
"
const Foo = () => <div><div className={styles.shouldMergeWithStyles} style={{ color: \\"#f00\\" }}>Foo</div><div className={styles.shouldMergeWithStyles} style={{ color: \\"#0f0\\" }}>Bar</div></div>

      ↓ ↓ ↓ ↓ ↓ ↓

\\"use strict\\";

var _reactNativeDynamicStyleProcessor = require(\\"react-native-dynamic-style-processor\\");

var Foo = function Foo() {
  return React.createElement(
    \\"div\\",
    null,
    React.createElement(
      \\"div\\",
      { style: [_reactNativeDynamicStyleProcessor.process(styles).shouldMergeWithStyles, { color: \\"#f00\\" }] },
      \\"Foo\\"
    ),
    React.createElement(
      \\"div\\",
      { style: [_reactNativeDynamicStyleProcessor.process(styles).shouldMergeWithStyles, { color: \\"#0f0\\" }] },
      \\"Bar\\"
    )
  );
};
"
`;

exports[`babel-plugin-react-native-classname-to-dynamic-style Should support merging className with style: Should support merging className with style 1`] = `
"
const Foo = () => <div className={styles.shouldMergeWithStyles} style={{ color: \\"#f00\\" }}>Foo</div>

      ↓ ↓ ↓ ↓ ↓ ↓

\\"use strict\\";

var _reactNativeDynamicStyleProcessor = require(\\"react-native-dynamic-style-processor\\");

var Foo = function Foo() {
  return React.createElement(
    \\"div\\",
    { style: [_reactNativeDynamicStyleProcessor.process(styles).shouldMergeWithStyles, { color: \\"#f00\\" }] },
    \\"Foo\\"
  );
};
"
`;

exports[`babel-plugin-react-native-classname-to-dynamic-style Should support merging single className with style but not touch parent element's style: Should support merging single className with style but not touch parent element's style 1`] = `
"
const Foo = () => <div style={{ width: \\"100%\\" }}><div className={styles.imWithFoo} style={{ color: \\"black\\" }}>Foo</div></div>

      ↓ ↓ ↓ ↓ ↓ ↓

\\"use strict\\";

var _reactNativeDynamicStyleProcessor = require(\\"react-native-dynamic-style-processor\\");

var Foo = function Foo() {
  return React.createElement(
    \\"div\\",
    { style: { width: \\"100%\\" } },
    React.createElement(
      \\"div\\",
      { style: [_reactNativeDynamicStyleProcessor.process(styles).imWithFoo, { color: \\"black\\" }] },
      \\"Foo\\"
    )
  );
};
"
`;

exports[`babel-plugin-react-native-classname-to-dynamic-style Should support multiple classnames by joining an array and merge empty styles object: Should support multiple classnames by joining an array and merge empty styles object 1`] = `
"
const Foo = () => <div className={[styles.style1, styles.style2, styles.style3].join(' ')} style={{}}>Foo</div>

      ↓ ↓ ↓ ↓ ↓ ↓

'use strict';

var _reactNativeDynamicStyleProcessor = require('react-native-dynamic-style-processor');

var Foo = function Foo() {
  return React.createElement(
    'div',
    { style: [_reactNativeDynamicStyleProcessor.process(styles).style1, _reactNativeDynamicStyleProcessor.process(styles).style2, _reactNativeDynamicStyleProcessor.process(styles).style3, {}] },
    'Foo'
  );
};
"
`;

exports[`babel-plugin-react-native-classname-to-dynamic-style Should support multiple classnames by joining an array and merge styles object: Should support multiple classnames by joining an array and merge styles object 1`] = `
"
const Foo = () => <div className={[styles.style1, styles.style2, styles.style3].join(' ')} style={{ color: \\"red\\" }}>Foo</div>

      ↓ ↓ ↓ ↓ ↓ ↓

\\"use strict\\";

var _reactNativeDynamicStyleProcessor = require(\\"react-native-dynamic-style-processor\\");

var Foo = function Foo() {
  return React.createElement(
    \\"div\\",
    { style: [_reactNativeDynamicStyleProcessor.process(styles).style1, _reactNativeDynamicStyleProcessor.process(styles).style2, _reactNativeDynamicStyleProcessor.process(styles).style3, { color: \\"red\\" }] },
    \\"Foo\\"
  );
};
"
`;

exports[`babel-plugin-react-native-classname-to-dynamic-style Should support multiple classnames by joining an array with multiple elements: Should support multiple classnames by joining an array with multiple elements 1`] = `
"
const Foo = () => <div><div className={[styles.style1, styles.style2].join(' ')}>Foo</div><div className={[styles.style3, styles.style4].join(' ')}>Bar</div></div>

      ↓ ↓ ↓ ↓ ↓ ↓

'use strict';

var _reactNativeDynamicStyleProcessor = require('react-native-dynamic-style-processor');

var Foo = function Foo() {
  return React.createElement(
    'div',
    null,
    React.createElement(
      'div',
      { style: [_reactNativeDynamicStyleProcessor.process(styles).style1, _reactNativeDynamicStyleProcessor.process(styles).style2] },
      'Foo'
    ),
    React.createElement(
      'div',
      { style: [_reactNativeDynamicStyleProcessor.process(styles).style3, _reactNativeDynamicStyleProcessor.process(styles).style4] },
      'Bar'
    )
  );
};
"
`;

exports[`babel-plugin-react-native-classname-to-dynamic-style Should support multiple classnames by joining an array: Should support multiple classnames by joining an array 1`] = `
"
const Foo = () => <div className={[styles.style1, styles.style2].join(' ')}>Foo</div>

      ↓ ↓ ↓ ↓ ↓ ↓

'use strict';

var _reactNativeDynamicStyleProcessor = require('react-native-dynamic-style-processor');

var Foo = function Foo() {
  return React.createElement(
    'div',
    { style: [_reactNativeDynamicStyleProcessor.process(styles).style1, _reactNativeDynamicStyleProcessor.process(styles).style2] },
    'Foo'
  );
};
"
`;

exports[`babel-plugin-react-native-classname-to-dynamic-style Should support multiple classnames by joining an array: Should support multiple classnames by joining an array 2`] = `
"
const Foo = () => <div className={[styles.style1, styles.style2, styles.style3].join(' ')}>Foo</div>

      ↓ ↓ ↓ ↓ ↓ ↓

'use strict';

var _reactNativeDynamicStyleProcessor = require('react-native-dynamic-style-processor');

var Foo = function Foo() {
  return React.createElement(
    'div',
    { style: [_reactNativeDynamicStyleProcessor.process(styles).style1, _reactNativeDynamicStyleProcessor.process(styles).style2, _reactNativeDynamicStyleProcessor.process(styles).style3] },
    'Foo'
  );
};
"
`;

exports[`babel-plugin-react-native-classname-to-dynamic-style Should support multiple classnames type in array styles objects: Should support multiple classnames type in array styles objects 1`] = `
"
import styles from \\"./styles.css\\";
const Foo = () => {
  const
    rd = Math.random(10),
    style1 = styles.bar,
    style2 = rd % 2 === 1 ? styles.bay : styles.baz;
  
  return <div className={[styles.foo, style1, style2].join(' ')}>Bar</div>
}

      ↓ ↓ ↓ ↓ ↓ ↓

\\"use strict\\";

var _styles = require(\\"./styles.css\\");

var _styles2 = _interopRequireDefault(_styles);

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

var _reactNativeDynamicStyleProcessor = require(\\"react-native-dynamic-style-processor\\");

var Foo = function Foo() {
  var rd = Math.random(10),
      style1 = _styles2.default.bar,
      style2 = rd % 2 === 1 ? _styles2.default.bay : _styles2.default.baz;

  return React.createElement(
    \\"div\\",
    { style: [_reactNativeDynamicStyleProcessor.process(_styles2.default).foo, style1, style2] },
    \\"Bar\\"
  );
};
"
`;

exports[`babel-plugin-react-native-classname-to-dynamic-style Should support multiple classnames with brackets with template literals: Should support multiple classnames with brackets with template literals 1`] = `
"
const Foo = () => <div className={\`\${styles['foo']} \${styles['bar']}\`}>Foo</div>

      ↓ ↓ ↓ ↓ ↓ ↓

'use strict';

var _reactNativeDynamicStyleProcessor = require('react-native-dynamic-style-processor');

var Foo = function Foo() {
  return React.createElement(
    'div',
    { style: [_reactNativeDynamicStyleProcessor.process(styles)['foo'], _reactNativeDynamicStyleProcessor.process(styles)['bar']] },
    'Foo'
  );
};
"
`;

exports[`babel-plugin-react-native-classname-to-dynamic-style Should support multiple classnames with template literals and another element with multiple classnames by joining an array and merge styles objects: Should support multiple classnames with template literals and another element with multiple classnames by joining an array and merge styles objects 1`] = `
"
const Foo = () => <div><div className={\`\${styles.foo} \${styles.bar} \${styles.baz}\`} style={{ color: 'blue' }}>Foo</div><div className={[styles.style1, styles.style2, styles.style3].join(' ')} style={{ color: 'red' }}>Bar</div></div>

      ↓ ↓ ↓ ↓ ↓ ↓

'use strict';

var _reactNativeDynamicStyleProcessor = require('react-native-dynamic-style-processor');

var Foo = function Foo() {
  return React.createElement(
    'div',
    null,
    React.createElement(
      'div',
      { style: [_reactNativeDynamicStyleProcessor.process(styles).foo, _reactNativeDynamicStyleProcessor.process(styles).bar, _reactNativeDynamicStyleProcessor.process(styles).baz, { color: 'blue' }] },
      'Foo'
    ),
    React.createElement(
      'div',
      { style: [_reactNativeDynamicStyleProcessor.process(styles).style1, _reactNativeDynamicStyleProcessor.process(styles).style2, _reactNativeDynamicStyleProcessor.process(styles).style3, { color: 'red' }] },
      'Bar'
    )
  );
};
"
`;

exports[`babel-plugin-react-native-classname-to-dynamic-style Should support multiple classnames with template literals and another element with multiple classnames by joining an array: Should support multiple classnames with template literals and another element with multiple classnames by joining an array 1`] = `
"
const Foo = () => <div><div className={\`\${styles.foo} \${styles.bar} \${styles.baz}\`}>Foo</div><div className={[styles.style1, styles.style2].join(' ')}>Bar</div></div>

      ↓ ↓ ↓ ↓ ↓ ↓

'use strict';

var _reactNativeDynamicStyleProcessor = require('react-native-dynamic-style-processor');

var Foo = function Foo() {
  return React.createElement(
    'div',
    null,
    React.createElement(
      'div',
      { style: [_reactNativeDynamicStyleProcessor.process(styles).foo, _reactNativeDynamicStyleProcessor.process(styles).bar, _reactNativeDynamicStyleProcessor.process(styles).baz] },
      'Foo'
    ),
    React.createElement(
      'div',
      { style: [_reactNativeDynamicStyleProcessor.process(styles).style1, _reactNativeDynamicStyleProcessor.process(styles).style2] },
      'Bar'
    )
  );
};
"
`;

exports[`babel-plugin-react-native-classname-to-dynamic-style Should support multiple classnames with template literals and merge empty styles object: Should support multiple classnames with template literals and merge empty styles object 1`] = `
"
const Foo = () => <div className={\`\${styles.foo} \${styles.bar} \${styles.baz}\`} style={{}}>Foo</div>

      ↓ ↓ ↓ ↓ ↓ ↓

\\"use strict\\";

var _reactNativeDynamicStyleProcessor = require(\\"react-native-dynamic-style-processor\\");

var Foo = function Foo() {
  return React.createElement(
    \\"div\\",
    { style: [_reactNativeDynamicStyleProcessor.process(styles).foo, _reactNativeDynamicStyleProcessor.process(styles).bar, _reactNativeDynamicStyleProcessor.process(styles).baz, {}] },
    \\"Foo\\"
  );
};
"
`;

exports[`babel-plugin-react-native-classname-to-dynamic-style Should support multiple classnames with template literals and merge styles object: Should support multiple classnames with template literals and merge styles object 1`] = `
"
const Foo = () => <div className={\`\${styles.foo} \${styles.bar} \${styles.baz}\`} style={{ color: 'black' }}>Foo</div>

      ↓ ↓ ↓ ↓ ↓ ↓

'use strict';

var _reactNativeDynamicStyleProcessor = require('react-native-dynamic-style-processor');

var Foo = function Foo() {
  return React.createElement(
    'div',
    { style: [_reactNativeDynamicStyleProcessor.process(styles).foo, _reactNativeDynamicStyleProcessor.process(styles).bar, _reactNativeDynamicStyleProcessor.process(styles).baz, { color: 'black' }] },
    'Foo'
  );
};
"
`;

exports[`babel-plugin-react-native-classname-to-dynamic-style Should support multiple classnames with template literals: Should support multiple classnames with template literals 1`] = `
"
const Foo = () => <div className={\`\${styles.foo} \${styles.bar}\`}>Foo</div>

      ↓ ↓ ↓ ↓ ↓ ↓

\\"use strict\\";

var _reactNativeDynamicStyleProcessor = require(\\"react-native-dynamic-style-processor\\");

var Foo = function Foo() {
  return React.createElement(
    \\"div\\",
    { style: [_reactNativeDynamicStyleProcessor.process(styles).foo, _reactNativeDynamicStyleProcessor.process(styles).bar] },
    \\"Foo\\"
  );
};
"
`;

exports[`babel-plugin-react-native-classname-to-dynamic-style Should support multiple classnames with template literals: Should support multiple classnames with template literals 2`] = `
"
const Foo = () => <div className={\`\${styles.foo} \${styles.bar} \${styles.baz}\`}>Foo</div>

      ↓ ↓ ↓ ↓ ↓ ↓

\\"use strict\\";

var _reactNativeDynamicStyleProcessor = require(\\"react-native-dynamic-style-processor\\");

var Foo = function Foo() {
  return React.createElement(
    \\"div\\",
    { style: [_reactNativeDynamicStyleProcessor.process(styles).foo, _reactNativeDynamicStyleProcessor.process(styles).bar, _reactNativeDynamicStyleProcessor.process(styles).baz] },
    \\"Foo\\"
  );
};
"
`;

exports[`babel-plugin-react-native-classname-to-dynamic-style Should support single bracket style by joining an array and merge styles object: Should support single bracket style by joining an array and merge styles object 1`] = `
"
const Foo = () => <div className={[styles[\\"style1\\"]].join(' ')} style={{ color: \\"red\\" }}>Foo</div>

      ↓ ↓ ↓ ↓ ↓ ↓

\\"use strict\\";

var _reactNativeDynamicStyleProcessor = require(\\"react-native-dynamic-style-processor\\");

var Foo = function Foo() {
  return React.createElement(
    \\"div\\",
    { style: [_reactNativeDynamicStyleProcessor.process(styles)[\\"style1\\"], { color: \\"red\\" }] },
    \\"Foo\\"
  );
};
"
`;

exports[`babel-plugin-react-native-classname-to-dynamic-style Should support single bracket style with template literals and merge styles object: Should support single bracket style with template literals and merge styles object 1`] = `
"
const Foo = () => <div className={\`\${styles['foo']}\`} style={{ color: 'black' }}>Foo</div>

      ↓ ↓ ↓ ↓ ↓ ↓

'use strict';

var _reactNativeDynamicStyleProcessor = require('react-native-dynamic-style-processor');

var Foo = function Foo() {
  return React.createElement(
    'div',
    { style: [_reactNativeDynamicStyleProcessor.process(styles)['foo'], { color: 'black' }] },
    'Foo'
  );
};
"
`;

exports[`babel-plugin-react-native-classname-to-dynamic-style Should support single bracket style with template literals: Should support single bracket style with template literals 1`] = `
"
const Foo = () => <div className={\`\${styles['foo']}\`}>Foo</div>

      ↓ ↓ ↓ ↓ ↓ ↓

'use strict';

var _reactNativeDynamicStyleProcessor = require('react-native-dynamic-style-processor');

var Foo = function Foo() {
  return React.createElement(
    'div',
    { style: [_reactNativeDynamicStyleProcessor.process(styles)['foo']] },
    'Foo'
  );
};
"
`;

exports[`babel-plugin-react-native-classname-to-dynamic-style Should support single classname by joining an array and merge empty styles object: Should support single classname by joining an array and merge empty styles object 1`] = `
"
const Foo = () => <div className={[styles.style1].join(' ')} style={{}}>Foo</div>

      ↓ ↓ ↓ ↓ ↓ ↓

'use strict';

var _reactNativeDynamicStyleProcessor = require('react-native-dynamic-style-processor');

var Foo = function Foo() {
  return React.createElement(
    'div',
    { style: [_reactNativeDynamicStyleProcessor.process(styles).style1, {}] },
    'Foo'
  );
};
"
`;

exports[`babel-plugin-react-native-classname-to-dynamic-style Should support single classname by joining an array and merge styles object: Should support single classname by joining an array and merge styles object 1`] = `
"
const Foo = () => <div className={[styles.style1].join(' ')} style={{ color: \\"red\\" }}>Foo</div>

      ↓ ↓ ↓ ↓ ↓ ↓

\\"use strict\\";

var _reactNativeDynamicStyleProcessor = require(\\"react-native-dynamic-style-processor\\");

var Foo = function Foo() {
  return React.createElement(
    \\"div\\",
    { style: [_reactNativeDynamicStyleProcessor.process(styles).style1, { color: \\"red\\" }] },
    \\"Foo\\"
  );
};
"
`;

exports[`babel-plugin-react-native-classname-to-dynamic-style Should support single classname by joining an array: Should support single classname by joining an array 1`] = `
"
const Foo = () => <div className={[styles.style1].join(' ')}>Foo</div>

      ↓ ↓ ↓ ↓ ↓ ↓

'use strict';

var _reactNativeDynamicStyleProcessor = require('react-native-dynamic-style-processor');

var Foo = function Foo() {
  return React.createElement(
    'div',
    { style: [_reactNativeDynamicStyleProcessor.process(styles).style1, {}] },
    'Foo'
  );
};
"
`;

exports[`babel-plugin-react-native-classname-to-dynamic-style Should support single classname with template literals and merge empty styles object: Should support single classname with template literals and merge empty styles object 1`] = `
"
const Foo = () => <div className={\`\${styles.foo}\`} style={{}}>Foo</div>

      ↓ ↓ ↓ ↓ ↓ ↓

\\"use strict\\";

var _reactNativeDynamicStyleProcessor = require(\\"react-native-dynamic-style-processor\\");

var Foo = function Foo() {
  return React.createElement(
    \\"div\\",
    { style: [_reactNativeDynamicStyleProcessor.process(styles).foo, {}] },
    \\"Foo\\"
  );
};
"
`;

exports[`babel-plugin-react-native-classname-to-dynamic-style Should support single classname with template literals and merge styles object: Should support single classname with template literals and merge styles object 1`] = `
"
const Foo = () => <div className={\`\${styles.foo}\`} style={{ color: 'black' }}>Foo</div>

      ↓ ↓ ↓ ↓ ↓ ↓

'use strict';

var _reactNativeDynamicStyleProcessor = require('react-native-dynamic-style-processor');

var Foo = function Foo() {
  return React.createElement(
    'div',
    { style: [_reactNativeDynamicStyleProcessor.process(styles).foo, { color: 'black' }] },
    'Foo'
  );
};
"
`;

exports[`babel-plugin-react-native-classname-to-dynamic-style Should support single classname with template literals: Should support single classname with template literals 1`] = `
"
const Foo = () => <div className={\`\${styles.foo}\`}>Foo</div>

      ↓ ↓ ↓ ↓ ↓ ↓

\\"use strict\\";

var _reactNativeDynamicStyleProcessor = require(\\"react-native-dynamic-style-processor\\");

var Foo = function Foo() {
  return React.createElement(
    \\"div\\",
    { style: [_reactNativeDynamicStyleProcessor.process(styles).foo] },
    \\"Foo\\"
  );
};
"
`;

exports[`babel-plugin-react-native-classname-to-dynamic-style Should transform className that uses bracket syntax and a function call: Should transform className that uses bracket syntax and a function call 1`] = `
"
const Foo = (color) => <div className={styles[\\"button\\" + titleCase(color)]}>Foo</div>

      ↓ ↓ ↓ ↓ ↓ ↓

\\"use strict\\";

var _reactNativeDynamicStyleProcessor = require(\\"react-native-dynamic-style-processor\\");

var Foo = function Foo(color) {
  return React.createElement(
    \\"div\\",
    { style: _reactNativeDynamicStyleProcessor.process(styles)[\\"button\\" + titleCase(color)] },
    \\"Foo\\"
  );
};
"
`;

exports[`babel-plugin-react-native-classname-to-dynamic-style Should transform className that uses bracket syntax and merge with style: Should transform className that uses bracket syntax and merge with style 1`] = `
"
const Foo = (color) => <div className={styles[\\"foo-bar\\"]} style={{ color: \\"#f00\\" }}>Foo</div>

      ↓ ↓ ↓ ↓ ↓ ↓

\\"use strict\\";

var _reactNativeDynamicStyleProcessor = require(\\"react-native-dynamic-style-processor\\");

var Foo = function Foo(color) {
  return React.createElement(
    \\"div\\",
    { style: [_reactNativeDynamicStyleProcessor.process(styles)[\\"foo-bar\\"], { color: \\"#f00\\" }] },
    \\"Foo\\"
  );
};
"
`;

exports[`babel-plugin-react-native-classname-to-dynamic-style Should transform className that uses bracket syntax: Should transform className that uses bracket syntax 1`] = `
"
const Foo = (color) => <div className={styles[\\"foo-bar\\"]}>Foo</div>

      ↓ ↓ ↓ ↓ ↓ ↓

\\"use strict\\";

var _reactNativeDynamicStyleProcessor = require(\\"react-native-dynamic-style-processor\\");

var Foo = function Foo(color) {
  return React.createElement(
    \\"div\\",
    { style: _reactNativeDynamicStyleProcessor.process(styles)[\\"foo-bar\\"] },
    \\"Foo\\"
  );
};
"
`;

exports[`babel-plugin-react-native-classname-to-dynamic-style Should transform className with number to style with number: Should transform className with number to style with number 1`] = `
"
const Foo = () => <div className={1}>Foo</div>

      ↓ ↓ ↓ ↓ ↓ ↓

\\"use strict\\";

var Foo = function Foo() {
  return React.createElement(
    \\"div\\",
    { style: 1 },
    \\"Foo\\"
  );
};
"
`;

exports[`babel-plugin-react-native-classname-to-dynamic-style Should transform className with ref to style with ref: Should transform className with ref to style with ref 1`] = `
"
const Foo = () => <div className={styles}>Foo</div>

      ↓ ↓ ↓ ↓ ↓ ↓

\\"use strict\\";

var Foo = function Foo() {
  return React.createElement(
    \\"div\\",
    { style: styles },
    \\"Foo\\"
  );
};
"
`;

exports[`babel-plugin-react-native-classname-to-dynamic-style Should transform classname with ternary and bracket syntax: Should transform classname with ternary and bracket syntax 1`] = `
"
const Foo = () => <div className={isTrue ? styles[\\"foo\\"] : styles[\\"bar\\"]}>Foo</div>

      ↓ ↓ ↓ ↓ ↓ ↓

\\"use strict\\";

var _reactNativeDynamicStyleProcessor = require(\\"react-native-dynamic-style-processor\\");

var Foo = function Foo() {
  return React.createElement(
    \\"div\\",
    { style: isTrue ? _reactNativeDynamicStyleProcessor.process(styles)[\\"foo\\"] : _reactNativeDynamicStyleProcessor.process(styles)[\\"bar\\"] },
    \\"Foo\\"
  );
};
"
`;

exports[`babel-plugin-react-native-classname-to-dynamic-style Should transform classname with ternary and merge with style property: Should transform classname with ternary and merge with style property 1`] = `
"
const Foo = () => <div className={isTrue ? styles.foo : styles.bar} style={{ color: \\"#f00\\" }}>Foo</div>

      ↓ ↓ ↓ ↓ ↓ ↓

\\"use strict\\";

var _reactNativeDynamicStyleProcessor = require(\\"react-native-dynamic-style-processor\\");

var Foo = function Foo() {
  return React.createElement(
    \\"div\\",
    { style: [isTrue ? _reactNativeDynamicStyleProcessor.process(styles).foo : _reactNativeDynamicStyleProcessor.process(styles).bar, { color: \\"#f00\\" }] },
    \\"Foo\\"
  );
};
"
`;

exports[`babel-plugin-react-native-classname-to-dynamic-style Should transform classname with ternary and merge with style property: Should transform classname with ternary and merge with style property 2`] = `
"
const Foo = () => <div className={isTrue ? styles[\\"foo\\"] : styles[\\"bar\\"]} style={{ color: \\"#f00\\" }}>Foo</div>

      ↓ ↓ ↓ ↓ ↓ ↓

\\"use strict\\";

var _reactNativeDynamicStyleProcessor = require(\\"react-native-dynamic-style-processor\\");

var Foo = function Foo() {
  return React.createElement(
    \\"div\\",
    { style: [isTrue ? _reactNativeDynamicStyleProcessor.process(styles)[\\"foo\\"] : _reactNativeDynamicStyleProcessor.process(styles)[\\"bar\\"], { color: \\"#f00\\" }] },
    \\"Foo\\"
  );
};
"
`;

exports[`babel-plugin-react-native-classname-to-dynamic-style Should transform classname with ternary where the test is a style prop and merge with style property: Should transform classname with ternary where the test is a style prop and merge with style property 1`] = `
"
const Foo = () => <div className={!styles.foo ? styles.foo : styles.bar} style={{ color: \\"#f00\\" }}>Foo</div>

      ↓ ↓ ↓ ↓ ↓ ↓

\\"use strict\\";

var _reactNativeDynamicStyleProcessor = require(\\"react-native-dynamic-style-processor\\");

var Foo = function Foo() {
  return React.createElement(
    \\"div\\",
    { style: [!_reactNativeDynamicStyleProcessor.process(styles).foo ? _reactNativeDynamicStyleProcessor.process(styles).foo : _reactNativeDynamicStyleProcessor.process(styles).bar, { color: \\"#f00\\" }] },
    \\"Foo\\"
  );
};
"
`;

exports[`babel-plugin-react-native-classname-to-dynamic-style Should transform classname with ternary where the test is a style prop and merge with style property: Should transform classname with ternary where the test is a style prop and merge with style property 2`] = `
"
const Foo = () => <div className={styles.foo !== undefined ? styles.foo : styles.bar} style={{ color: \\"#f00\\" }}>Foo</div>

      ↓ ↓ ↓ ↓ ↓ ↓

\\"use strict\\";

var _reactNativeDynamicStyleProcessor = require(\\"react-native-dynamic-style-processor\\");

var Foo = function Foo() {
  return React.createElement(
    \\"div\\",
    { style: [_reactNativeDynamicStyleProcessor.process(styles).foo !== undefined ? _reactNativeDynamicStyleProcessor.process(styles).foo : _reactNativeDynamicStyleProcessor.process(styles).bar, { color: \\"#f00\\" }] },
    \\"Foo\\"
  );
};
"
`;

exports[`babel-plugin-react-native-classname-to-dynamic-style Should transform classname with ternary where the test is a style prop and merge with style property: Should transform classname with ternary where the test is a style prop and merge with style property 3`] = `
"
const Foo = () => <div className={undefined !== styles.foo ? styles.foo : styles.bar} style={{ color: \\"#f00\\" }}>Foo</div>

      ↓ ↓ ↓ ↓ ↓ ↓

\\"use strict\\";

var _reactNativeDynamicStyleProcessor = require(\\"react-native-dynamic-style-processor\\");

var Foo = function Foo() {
  return React.createElement(
    \\"div\\",
    { style: [undefined !== _reactNativeDynamicStyleProcessor.process(styles).foo ? _reactNativeDynamicStyleProcessor.process(styles).foo : _reactNativeDynamicStyleProcessor.process(styles).bar, { color: \\"#f00\\" }] },
    \\"Foo\\"
  );
};
"
`;

exports[`babel-plugin-react-native-classname-to-dynamic-style Should transform classname with ternary where the test is a style prop: Should transform classname with ternary where the test is a style prop 1`] = `
"
const Foo = () => <div className={!styles.foo ? styles.foo : styles.bar}>Foo</div>

      ↓ ↓ ↓ ↓ ↓ ↓

\\"use strict\\";

var _reactNativeDynamicStyleProcessor = require(\\"react-native-dynamic-style-processor\\");

var Foo = function Foo() {
  return React.createElement(
    \\"div\\",
    { style: !_reactNativeDynamicStyleProcessor.process(styles).foo ? _reactNativeDynamicStyleProcessor.process(styles).foo : _reactNativeDynamicStyleProcessor.process(styles).bar },
    \\"Foo\\"
  );
};
"
`;

exports[`babel-plugin-react-native-classname-to-dynamic-style Should transform classname with ternary where the test is a style prop: Should transform classname with ternary where the test is a style prop 2`] = `
"
const Foo = () => <div className={styles.foo !== undefined ? styles.foo : styles.bar}>Foo</div>

      ↓ ↓ ↓ ↓ ↓ ↓

\\"use strict\\";

var _reactNativeDynamicStyleProcessor = require(\\"react-native-dynamic-style-processor\\");

var Foo = function Foo() {
  return React.createElement(
    \\"div\\",
    { style: _reactNativeDynamicStyleProcessor.process(styles).foo !== undefined ? _reactNativeDynamicStyleProcessor.process(styles).foo : _reactNativeDynamicStyleProcessor.process(styles).bar },
    \\"Foo\\"
  );
};
"
`;

exports[`babel-plugin-react-native-classname-to-dynamic-style Should transform classname with ternary where the test is a style prop: Should transform classname with ternary where the test is a style prop 3`] = `
"
const Foo = () => <div className={undefined !== styles.foo ? styles.foo : styles.bar}>Foo</div>

      ↓ ↓ ↓ ↓ ↓ ↓

\\"use strict\\";

var _reactNativeDynamicStyleProcessor = require(\\"react-native-dynamic-style-processor\\");

var Foo = function Foo() {
  return React.createElement(
    \\"div\\",
    { style: undefined !== _reactNativeDynamicStyleProcessor.process(styles).foo ? _reactNativeDynamicStyleProcessor.process(styles).foo : _reactNativeDynamicStyleProcessor.process(styles).bar },
    \\"Foo\\"
  );
};
"
`;

exports[`babel-plugin-react-native-classname-to-dynamic-style Should transform classname with ternary: Should transform classname with ternary 1`] = `
"
const Foo = () => <div className={isTrue ? styles.foo : styles.bar}>Foo</div>

      ↓ ↓ ↓ ↓ ↓ ↓

\\"use strict\\";

var _reactNativeDynamicStyleProcessor = require(\\"react-native-dynamic-style-processor\\");

var Foo = function Foo() {
  return React.createElement(
    \\"div\\",
    { style: isTrue ? _reactNativeDynamicStyleProcessor.process(styles).foo : _reactNativeDynamicStyleProcessor.process(styles).bar },
    \\"Foo\\"
  );
};
"
`;

exports[`babel-plugin-react-native-classname-to-dynamic-style Should transform multiple classnames with template literals to styles object with nested elements: Should transform multiple classnames with template literals to styles object with nested elements 1`] = `
"
const Foo = () => <div style={{ width: '100%' }}><div className={\`\${styles.foo1} \${styles.bar1}\`}><div className={\`\${styles.foo2} \${styles.bar2}\`} style={{ color: 'red' }}><div className={\`\${styles.foo3} \${styles.bar3}\`}>Bar</div></div></div></div>

      ↓ ↓ ↓ ↓ ↓ ↓

'use strict';

var _reactNativeDynamicStyleProcessor = require('react-native-dynamic-style-processor');

var Foo = function Foo() {
  return React.createElement(
    'div',
    { style: { width: '100%' } },
    React.createElement(
      'div',
      { style: [_reactNativeDynamicStyleProcessor.process(styles).foo1, _reactNativeDynamicStyleProcessor.process(styles).bar1] },
      React.createElement(
        'div',
        { style: [_reactNativeDynamicStyleProcessor.process(styles).foo2, _reactNativeDynamicStyleProcessor.process(styles).bar2, { color: 'red' }] },
        React.createElement(
          'div',
          { style: [_reactNativeDynamicStyleProcessor.process(styles).foo3, _reactNativeDynamicStyleProcessor.process(styles).bar3] },
          'Bar'
        )
      )
    )
  );
};
"
`;

exports[`babel-plugin-react-native-classname-to-dynamic-style Should transform single classname to styles object but not touch parent element's style: Should transform single classname to styles object but not touch parent element's style 1`] = `
"
const Foo = () => <div style={{ width: \\"100%\\" }}><div className={styles.imWithFoo}>Foo</div></div>

      ↓ ↓ ↓ ↓ ↓ ↓

\\"use strict\\";

var _reactNativeDynamicStyleProcessor = require(\\"react-native-dynamic-style-processor\\");

var Foo = function Foo() {
  return React.createElement(
    \\"div\\",
    { style: { width: \\"100%\\" } },
    React.createElement(
      \\"div\\",
      { style: _reactNativeDynamicStyleProcessor.process(styles).imWithFoo },
      \\"Foo\\"
    )
  );
};
"
`;

exports[`babel-plugin-react-native-classname-to-dynamic-style Should transform single classname to styles object with multiple elements: Should transform single classname to styles object with multiple elements 1`] = `
"
const Foo = () => <div><div className={styles.foo}>Foo</div><div className={styles.bar}>Bar</div></div>

      ↓ ↓ ↓ ↓ ↓ ↓

\\"use strict\\";

var _reactNativeDynamicStyleProcessor = require(\\"react-native-dynamic-style-processor\\");

var Foo = function Foo() {
  return React.createElement(
    \\"div\\",
    null,
    React.createElement(
      \\"div\\",
      { style: _reactNativeDynamicStyleProcessor.process(styles).foo },
      \\"Foo\\"
    ),
    React.createElement(
      \\"div\\",
      { style: _reactNativeDynamicStyleProcessor.process(styles).bar },
      \\"Bar\\"
    )
  );
};
"
`;

exports[`babel-plugin-react-native-classname-to-dynamic-style Should transform single classname to styles object with nested elements: Should transform single classname to styles object with nested elements 1`] = `
"
const Foo = () => <div style={{ width: \\"100%\\" }}><div className={styles.style1}><div className={styles.style2} style={{ color: \\"red\\" }}><div className={styles.style3}>Bar</div></div></div></div>

      ↓ ↓ ↓ ↓ ↓ ↓

\\"use strict\\";

var _reactNativeDynamicStyleProcessor = require(\\"react-native-dynamic-style-processor\\");

var Foo = function Foo() {
  return React.createElement(
    \\"div\\",
    { style: { width: \\"100%\\" } },
    React.createElement(
      \\"div\\",
      { style: _reactNativeDynamicStyleProcessor.process(styles).style1 },
      React.createElement(
        \\"div\\",
        { style: [_reactNativeDynamicStyleProcessor.process(styles).style2, { color: \\"red\\" }] },
        React.createElement(
          \\"div\\",
          { style: _reactNativeDynamicStyleProcessor.process(styles).style3 },
          \\"Bar\\"
        )
      )
    )
  );
};
"
`;

exports[`babel-plugin-react-native-classname-to-dynamic-style Should transform single classname to styles object: Should transform single classname to styles object 1`] = `
"
const Foo = () => <div className={styles.foo}>Foo</div>

      ↓ ↓ ↓ ↓ ↓ ↓

\\"use strict\\";

var _reactNativeDynamicStyleProcessor = require(\\"react-native-dynamic-style-processor\\");

var Foo = function Foo() {
  return React.createElement(
    \\"div\\",
    { style: _reactNativeDynamicStyleProcessor.process(styles).foo },
    \\"Foo\\"
  );
};
"
`;

exports[`babel-plugin-react-native-classname-to-dynamic-style Should transform single classname with a function call and merge with style: Should transform single classname with a function call and merge with style 1`] = `
"
const Foo = () => <div className={f(styles.foo)} style={{ color: \\"#f00\\" }}>Foo</div>

      ↓ ↓ ↓ ↓ ↓ ↓

\\"use strict\\";

var _reactNativeDynamicStyleProcessor = require(\\"react-native-dynamic-style-processor\\");

var Foo = function Foo() {
  return React.createElement(
    \\"div\\",
    { style: [f(_reactNativeDynamicStyleProcessor.process(styles).foo), { color: \\"#f00\\" }] },
    \\"Foo\\"
  );
};
"
`;

exports[`babel-plugin-react-native-classname-to-dynamic-style Should transform single classname with a function call: Should transform single classname with a function call 1`] = `
"
const Foo = () => <div className={f(styles.foo)}>Foo</div>

      ↓ ↓ ↓ ↓ ↓ ↓

\\"use strict\\";

var _reactNativeDynamicStyleProcessor = require(\\"react-native-dynamic-style-processor\\");

var Foo = function Foo() {
  return React.createElement(
    \\"div\\",
    { style: f(_reactNativeDynamicStyleProcessor.process(styles).foo) },
    \\"Foo\\"
  );
};
"
`;

exports[`babel-plugin-react-native-classname-to-dynamic-style Should transform ternaries with empty function calls: Should transform ternaries with empty function calls 1`] = `
"
const Foo = () => <div className={isTrue ? a() : b()}>Foo</div>

      ↓ ↓ ↓ ↓ ↓ ↓

\\"use strict\\";

var Foo = function Foo() {
  return React.createElement(
    \\"div\\",
    { style: isTrue ? a() : b() },
    \\"Foo\\"
  );
};
"
`;

exports[`babel-plugin-react-native-classname-to-dynamic-style Should transform ternaries with function calls and merge with style: Should transform ternaries with function calls and merge with style 1`] = `
"
const Foo = () => <div className={isTrue ? f(styles.foo) : f(styles.bar)} style={{ color: \\"#f00\\" }}>Foo</div>

      ↓ ↓ ↓ ↓ ↓ ↓

\\"use strict\\";

var _reactNativeDynamicStyleProcessor = require(\\"react-native-dynamic-style-processor\\");

var Foo = function Foo() {
  return React.createElement(
    \\"div\\",
    { style: [isTrue ? f(_reactNativeDynamicStyleProcessor.process(styles).foo) : f(_reactNativeDynamicStyleProcessor.process(styles).bar), { color: \\"#f00\\" }] },
    \\"Foo\\"
  );
};
"
`;

exports[`babel-plugin-react-native-classname-to-dynamic-style Should transform ternaries with function calls: Should transform ternaries with function calls 1`] = `
"
const Foo = () => <div className={isTrue ? f(styles.foo) : f(styles.bar)}>Foo</div>

      ↓ ↓ ↓ ↓ ↓ ↓

\\"use strict\\";

var _reactNativeDynamicStyleProcessor = require(\\"react-native-dynamic-style-processor\\");

var Foo = function Foo() {
  return React.createElement(
    \\"div\\",
    { style: isTrue ? f(_reactNativeDynamicStyleProcessor.process(styles).foo) : f(_reactNativeDynamicStyleProcessor.process(styles).bar) },
    \\"Foo\\"
  );
};
"
`;

exports[`babel-plugin-react-native-classname-to-dynamic-style Should transform ternaries with numbers: Should transform ternaries with numbers 1`] = `
"
const Foo = () => <div className={isTrue ? 1 : 2}>Foo</div>

      ↓ ↓ ↓ ↓ ↓ ↓

\\"use strict\\";

var Foo = function Foo() {
  return React.createElement(
    \\"div\\",
    { style: isTrue ? 1 : 2 },
    \\"Foo\\"
  );
};
"
`;

exports[`babel-plugin-react-native-classname-to-dynamic-style Should transform ternaries with strings: Should transform ternaries with strings 1`] = `
"
const Foo = () => <div className={isTrue ? \\"first\\" : \\"second\\"}>Foo</div>

      ↓ ↓ ↓ ↓ ↓ ↓

\\"use strict\\";

var Foo = function Foo() {
  return React.createElement(
    \\"div\\",
    { style: isTrue ? \\"first\\" : \\"second\\" },
    \\"Foo\\"
  );
};
"
`;
